/* 1) Swap 2 variables.
      a) With third variable
      b) With arithmetic operators (1 point) */

// a) With third variable

	let a = 7;
	let b = 10;
	let c = a;
	a = b;
	b = c;

// b) With arithmetic operators
	
	let a = 7;
	let b = 10;
	a = a + b;
	b = a - b;
	a = a - b;
   

// 2) Given three numbers. Find the maximum one (Only use &&, || and comparison operators) (2 points)

	let x = 9;
	let y = 2;
	let z = 7;
	x > y && x > z && `${x}` || y > z && `${y}` || `${z}`


/* 3) Given an array of integers. Write a function that returns a new array containing only odd numbers multiplied with new array length (2 points) */

	function newArr(arr) {
		let filtered = arr.filter (item => item % 2 === 1);
		let createArr = filtered.map (elem => elem * filtered.length);
			return createArr;
	}
	newArr([5, 4, 78, 0, -3, 7]);
	newArr([2, 4, 6, 88]);
	newArr([]);


/* 4) Given an array of integers. Write a function which will get that array and create new array, with size equal to first positive element of given array (If no positive element return []) and content of returned array will be next elements of given array (repeated, if needed).(2 points) */


	function newArr(arr) {
	  for (let i = 0; i < arr.length, i++) {
	    if (arr[i] > 0) {
	      let newLength = arr[i];
	    }
	      let createArr = arr.shift(arr[i]);
	      createArr.length = newLength;
              if (createArr.length > arr.length) {
	
	  	}
	}



/* 5) Given an array of integers. Write a function which will get that array and return an object with 2 properties even6 and odd7. Values of that properties will be
even6-> array of all positive numbers that are divisible by 6
odd7-> array of all positive odd numbers that are divisible by 7 (1 point) */

	function obj(arr) {
  		let filtered1 = arr.filter (item => item > 0 && item % 6 === 0);
  		let filtered2 = arr.filter (elem => elem > 0 && elem % 2 === 1 && elem % 7 === 0);
  		let createObj = {
    			even6: filtered1,
			odd7: filtered2
  		};
  		return createObj;
	}
	obj([5, 8, 2, 7, 18, 21, 42, 24]);


/* 6) Create User class. User needs to have name (a string containing only letters), age (a number in the range [0, 200]) and birthdate (only date type), validate that properties by getters and setters.original property names need to be private (do it using Symbol) (3 points) */

	let name = new Symbol();
	let age = new Symbol();
	let birthdate = new Symbol();
	let User {
  		constructor(name, age, birthdate) {
    			this.name = name;
    			this.age = age;
    			this.birthdate = birthdate;
  		}
	  get name() {
	    return this[name];
	  }
	  set name(value) {
	    if (typeof value === "string") {
	      this[name] = value;
	    }
	  }
	  get age() {
	    return this[age];
	  }
	  set age(value) {
	    if (typeof value === "number" && value > 0 && value < 200) {
	      this[age] = value
	    }
	  }
	  get birthdate() {
	    return this[birthdate];
	  }
	  set birthdate(value) {
	    if (typeof value === "date") {
	      this[birthdate] = value;
	    }
          }
	}
	let user = new User("Liana", 28, "05/11/1990");


/* 7) What is the difference ?

1-> function User(name) {
    this.name = name;
    this.printName = function() { console.log(this.name);};
       }
-------------------------------------------------------
2-> function User(name) {
    this.name = name;
       }

       User.prototype.printName = function() { console.log(this.name);}; */


The difference is that in the second case, where we add the method printname to the prototype, 
the right constructor didn't changed.


/* 8) Write a User function constructor which will add name and age properties into object. Create Player function constructor, which will extend from User and will have own specific method play which will log string “Player player_name is playing”. 
(2 points) */

	function User(name, age) {
		this.name = name;
 		this.age = age;
	}

	function Player(name, age) {
		User.call(this, name, age);
		this.play = function {
			console.log(`Player ${this.name} is playing`);
		}
	}
	let user = new User("Liana", "Avagyan");
	let player = new Player("Hayk", "Khachatryan");
	player.play();


/* 9) Implement 8 using classes. Add static property counter on Player, which will count how many instances of Player class were created.
           (1 point) */

	class User {
		constructor (name, age) {
			this.name = name;
			this.age = age;
		}
	class Player extends User {
		play() {
			console.log(`Player ${this.name} is playing`);
		}
		static counter() {
			
		}
	let user = new User("Liana", "Avagyan");
	let player = new Player("Hayk", "Khachatryan");




/* 11) Write a generator named arithmeticProgression which takes 2 parameters: firstElement, delta and generates an arithmetic sequence of numbers such that the difference of any two successive members of the sequence is a constant (delta). So that
const ap = arithmeticProgression(5, 3);
ap.next().value; // 5
ap.next().value; // 8
ap.next().value; // 11
ap.next().value; // 14 */


	function* arithmeticProgression(firstElement, delta) {
		for (let i = firstElement; i <= 14; i += delta) yield i;
	}
	for(let item of arithmeticProgression(5, 3)) {
    		console.log(item); 
	}
	[...arithmeticProgression(1, 5)]

			







	




	







